{"version":3,"sources":["assets/images/loading.gif","assets/images/hardware-register.PNG","assets/images/searching.png","actions/types.js","actions/index.js","baseValues.js","pages/AddHardware.js","pages/Search.js","pages/Home.js","components/Layout.js","reducers/index.js","store.js","pages/Login.js","pages/About.js","pages/Profile.js","components/NavigationBar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SET_AUTH","setAuthCred","cred","dispatch","type","BASE_URL","cardStyle","padding","borderRadius","boxShadow","width","photoStyle","height","buttonContainer","display","justifyContent","AddHardware","props","updateProductionNumber","e","setState","state","prodNumber","target","value","registerHardware","preventDefault","accessToken","data","JSON","stringify","production_number","$","ajax","method","url","headers","Authorization","xhr","window","XMLHttpRequest","upload","addEventListener","swal","icon","loading","dataType","success","resp","title","then","error","console","log","text","verfiyDevice","status","Fragment","Card","style","textAlign","Img","src","hardwareRegister","Form","onSubmit","this","InputGroup","className","Prepend","Text","id","Control","placeholder","onChange","required","Button","variant","marginLeft","onClick","Component","connect","credentials","tokens","buttonStyle","Search","updateProductNumber","productionNumber","updateRegisteredDate","registeredDate","getHardware","search","registered","component","searchDeviceList","results","newProductionNumber","updateHardwareInfo","device_id","registered_by","userID","deleteHardware","dangerMode","buttons","cancel","visible","confirm","val","getImageOrTable","selectedMore","filteredDetailInfo","filter","item","Array","isArray","length","Object","keys","constructor","searching","searchOption","Table","responsive","username","registered_on","ButtonToolbar","editModalShow","Modal","aria-labelledby","centered","show","Header","closeButton","Title","Body","FormControl","aria-label","aria-describedby","Footer","map","key","moreInfoModalShow","newProductionNumberFromDetail","getSearchField","access","Dropdown","Toggle","Menu","Item","Append","user","Home","refreshToken","reduxValue","setInterval","refresh","getUserID","marginTop","Layout","Container","children","defaultCredState","combineReducers","action","persistedState","serializedState","localStorage","getItem","parse","loadFromLocalStorage","store","createStore","rootReducer","compose","applyMiddleware","thunk","__REDUX_DEVTOOLS_EXTENSION__","formStyle","Login","updateUsername","auth","updatePassword","password","submitForm","bind","setAuth","app","Group","controlId","Label","name","subscribe","setItem","saveToLocalStorage","getState","About","Profile","newFirstName","userInfo","first_name","newLastName","last_name","newEmail","email","newUsername","newPhone","phone","updateUserInfo","active","is_active","superuser","is_superuser","staff","is_staff","updatedNewPassword","newPassword","updatedConfirmNewPassword","confirmNewPassword","updateUserPassword","changepasswordModalShow","marginRight","oldPassword","updatedOldPassword","Styles","styled","div","NavigationBar","killSession","removeItem","location","href","Navbar","expand","Brand","setMode","aria-controls","Collapse","position","right","Divider","defaultState","authenticated","mode","App","returnComponent","getComponents","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.f79eb414.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.b9b335db.gif\";","module.exports = __webpack_public_path__ + \"static/media/hardware-register.7bb60a09.PNG\";","module.exports = __webpack_public_path__ + \"static/media/searching.90982f5e.png\";","export const SET_AUTH = () => \"SET_AUTH\";\r\n","import { SET_AUTH } from './types';\r\n\r\n// AUTHENTICATION ACTIONS\r\n\r\nexport const setAuthCred = (cred) => dispatch => {\r\n    dispatch({\r\n        type: SET_AUTH,\r\n        cred\r\n    })\r\n}","export const BASE_URL = \"https://satshree.pythonanywhere.com\"","import React, { Component } from 'react'\r\nimport { Form, Button, InputGroup, Card } from 'react-bootstrap';\r\nimport $ from 'jquery';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { BASE_URL } from '../baseValues'\r\nimport hardwareRegister from \"../assets/images/hardware-register.PNG\";\r\nimport swal from 'sweetalert';\r\n\r\nimport loading from '../assets/images/loading.gif';\r\n\r\nconst cardStyle = {\r\n    padding: '30px',\r\n    borderRadius: '10px',\r\n    boxShadow: '0px 0px 10px 0px #000',\r\n    width: '30rem'\r\n\r\n};\r\n\r\nconst containerStyle = {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n}\r\n\r\nconst photoStyle = {\r\n    height: '250px',\r\n    width: '400px',\r\n}\r\n\r\nconst imageContainer = {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n}\r\n\r\nconst buttonContainer = {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n}\r\n\r\nexport class AddHardware extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            accessToken: this.props.accessToken,\r\n            prodNumber: ''\r\n        }\r\n    }\r\n\r\n    updateProductionNumber = (e) => {\r\n        this.setState({ ...this.state, prodNumber: e.target.value });\r\n    }\r\n\r\n    registerHardware = (e) => {\r\n        e.preventDefault();\r\n\r\n        let { prodNumber, accessToken } = this.state\r\n\r\n        if (prodNumber) {\r\n            let data = JSON.stringify({\r\n                production_number: prodNumber\r\n            });\r\n\r\n            $.ajax({\r\n                method: \"POST\",\r\n                url: BASE_URL + \"/api/hardware/\",\r\n                headers: {\r\n                    Authorization: accessToken,\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                xhr: function () {\r\n                    let xhr = new window.XMLHttpRequest();\r\n                    xhr.upload.addEventListener(\"progress\", function () {\r\n                        swal({\r\n                            icon:loading\r\n                        });\r\n                    }, false);\r\n\r\n                    return xhr;\r\n                },\r\n                data,\r\n                dataType: 'json',\r\n                success: (resp) => {\r\n                    swal({\r\n                        title: \"Hardware successfully added.\",\r\n                        icon: \"success\"\r\n                    }).then(() => this.setState({ ...this.state, prodNumber: '' }));\r\n                },\r\n                error: (resp) => {\r\n                    console.log(resp);\r\n                    swal({\r\n                        title: \"Something went wrong.\",\r\n                        text: \"Please try again\",\r\n                        icon: \"warning\"\r\n                    })\r\n                }\r\n            });\r\n        } else {\r\n            swal({\r\n                title: \"Please Enter Production Number.\",\r\n                icon: \"warning\"\r\n            })\r\n        }\r\n    }\r\n\r\n    verfiyDevice = (e) => {\r\n        e.preventDefault();\r\n\r\n        let { prodNumber, accessToken } = this.state\r\n\r\n        if (prodNumber) {\r\n            let data = JSON.stringify({\r\n                production_number: prodNumber\r\n            });\r\n\r\n            $.ajax({\r\n                method: \"POST\",\r\n                url: BASE_URL + \"/api/hardware/verify/device/\",\r\n                headers: {\r\n                    Authorization: accessToken,\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                xhr: function () {\r\n                    let xhr = new window.XMLHttpRequest();\r\n                    xhr.upload.addEventListener(\"progress\", function () {\r\n                        swal({\r\n                            icon:loading\r\n                        });\r\n                    }, false);\r\n\r\n                    return xhr;\r\n                },\r\n                data,\r\n                dataType: 'json',\r\n                success: (resp) => {\r\n                    if (resp.status === true){\r\n                        swal({\r\n                            title: \"Device exists .\",\r\n                            icon: \"success\"\r\n                        }).then(() => this.setState({ ...this.state, prodNumber: '' }));\r\n                    }\r\n                    \r\n                },\r\n                error: (resp) => {\r\n                    console.log(resp);\r\n                    if (resp.status === 404){\r\n                        swal({\r\n                            title: \"Device doesnot exist.\",\r\n                            icon: \"warning\"\r\n                        }).then(() => this.setState({ ...this.state, prodNumber: '' }));\r\n                    }\r\n                    else {\r\n                        swal({\r\n                            title: \"Something went wrong.\",\r\n                            text: \"Please try again\",\r\n                            icon: \"warning\"\r\n                        })\r\n                    }\r\n                    \r\n                }\r\n            });\r\n        } else {\r\n            swal({\r\n                title: \"Please Enter Production Number.\",\r\n                icon: \"warning\"\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Card style={cardStyle}>\r\n                    <h3 style={{ textAlign: 'center' }}>Register Hardware</h3>\r\n                    <br />\r\n                    <Card.Img src={hardwareRegister} style={photoStyle} />\r\n                    <br />\r\n                    <Form onSubmit={this.registerHardware} >\r\n                        <InputGroup className=\"mb-3\">\r\n                            <InputGroup.Prepend>\r\n                                <InputGroup.Text id=\"basic-addon1\">Production Number</InputGroup.Text>\r\n                            </InputGroup.Prepend>\r\n                            <Form.Control\r\n                                placeholder=\"Enter Production Number\"\r\n                                type=\"number\"\r\n                                onChange={this.updateProductionNumber}\r\n                                value={this.state.prodNumber}\r\n                                required\r\n                            />\r\n                        </InputGroup>\r\n                        <div className=\"container\" style={buttonContainer}>\r\n                            <Button variant=\"success\" type=\"submit\"  >Register Now</Button>\r\n                            <Button variant=\"success\" style={{marginLeft: \"10px\"}} type=\"submit\" onClick={this.verfiyDevice} >Verify Device</Button>\r\n                        </div>\r\n                    </Form>\r\n                </Card>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    accessToken: state.credentials.tokens.accessToken\r\n})\r\n\r\nexport default connect(mapStateToProps, {})(AddHardware);\r\n","import React, { Component } from 'react'\r\nimport { Button, InputGroup, Form, Card, Table, ButtonToolbar, Modal, FormControl, Dropdown } from 'react-bootstrap';\r\nimport { connect } from 'react-redux';\r\nimport swal from 'sweetalert';\r\n\r\nimport $ from 'jquery';\r\n\r\nimport { BASE_URL } from '../baseValues'\r\nimport searching from \"../assets/images/searching.png\";\r\n\r\nconst cardStyle = {\r\n    padding: '30px',\r\n    borderRadius: '10px',\r\n    boxShadow: '0px 0px 10px 0px #000',\r\n    width: '30rem'\r\n\r\n};\r\n\r\nconst containerStyle = {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n}\r\n\r\nconst photoStyle = {\r\n    height: '250px',\r\n    width: '400px',\r\n}\r\n\r\nconst imageContainer = {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n}\r\n\r\nconst buttonContainer = {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n}\r\n\r\nconst buttonStyle = {\r\n\r\n    display: 'flex',\r\n    justifyContent: 'center'\r\n\r\n};\r\n\r\nexport class Search extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            editModalShow: false,\r\n            moreInfoModalShow: false,\r\n            selectedMore: '',\r\n            productionNumber: \"\",\r\n            registeredDate: \"\",\r\n            accessToken: this.props.access,\r\n            searchDeviceList: [],\r\n            searchOption: 'productionNumber'\r\n        }\r\n\r\n    }\r\n\r\n    updateProductNumber = (e) => {\r\n        this.setState({ ...this.state, productionNumber: e.target.value })\r\n    }\r\n\r\n    updateRegisteredDate = (e) => {\r\n        this.setState({ ...this.state, registeredDate: e.target.value })\r\n    }\r\n\r\n    getHardware = (e) => {\r\n        e.preventDefault();\r\n\r\n        let { accessToken, productionNumber, registeredDate } = this.state;\r\n\r\n        let data = {\r\n            search: productionNumber,\r\n            registered: registeredDate,\r\n        };\r\n\r\n        var component = this;\r\n\r\n        $.ajax({\r\n            method: \"GET\",\r\n            url: BASE_URL + \"/api/hardware/\",\r\n            headers: {\r\n                Authorization: accessToken,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            data,\r\n            dataType: 'json',\r\n            success: function (resp) {\r\n                component.setState({ ...component.state, searchDeviceList: resp.results });\r\n            },\r\n            error: function (resp) {\r\n                console.log(resp)\r\n                if (resp.status === 404 ) {\r\n                    swal({\r\n                        title: \"Device Not Found.\",\r\n                        icon: \"warning\"\r\n                    });\r\n                } else {\r\n                    swal({\r\n                        title: \"Something went wrong.\",\r\n                        text: \"Please try again.\",\r\n                        icon: \"warning\"\r\n                    });\r\n                }\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    newProductionNumber = (e) => {\r\n        let { searchDeviceList } = this.state;\r\n        searchDeviceList.production_number = e.target.value\r\n        this.setState({ ...this.state, searchDeviceList });\r\n    }\r\n\r\n    // newProductionNumberFromDetail = (e) => {\r\n    //     let {  } = this.state;\r\n\r\n    // }\r\n\r\n    updateHardwareInfo = (e) => {\r\n        e.preventDefault();\r\n\r\n        let { searchDeviceList, accessToken } = this.state;\r\n\r\n        let productionNumber = searchDeviceList.production_number;\r\n\r\n        let device_id = searchDeviceList.device_id;\r\n\r\n        if (\r\n            (productionNumber)\r\n            &&\r\n            (searchDeviceList.registered_by.id === this.props.userID)\r\n        ) {\r\n            let data = JSON.stringify({\r\n                production_number: productionNumber\r\n            });\r\n\r\n            $.ajax({\r\n                method: \"PUT\",\r\n                url: BASE_URL + `/api/hardware/${device_id}`,\r\n                headers: {\r\n                    Authorization: accessToken,\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                data,\r\n                dataType: 'json',\r\n                success: (resp) => {\r\n                    swal({\r\n                        title: \"Hardware Info Updated Successfully.\",\r\n                        icon: \"success\"\r\n                    })\r\n                    // .then(() => this.setState({ ...this.state, productionNumber: ''}));\r\n                },\r\n                error: (resp) => {\r\n                    console.log(resp);\r\n                    swal({\r\n                        title: \"Something went wrong.\",\r\n                        text: \"Please try again\",\r\n                        icon: \"warning\"\r\n                    })\r\n                    // <Card.Img src={searching} style={{ height: '289px', width: '400px' }} />\r\n                }\r\n            });\r\n        } else {\r\n            let title = \"\";\r\n            if (searchDeviceList.registered_by.id !== this.props.userID) {\r\n                title = \"You cannot update information of device registered by other registrars!\"\r\n                \r\n            } else {\r\n                title = \"Please Enter New Production Number.\"\r\n            }\r\n            swal({\r\n                title,\r\n                icon: \"warning\"\r\n            }).then(() => this.setState({ ...this.state, searchDeviceList: [], productionNumber: ''}));\r\n        }\r\n    }\r\n\r\n    deleteHardware = (e) => {\r\n        e.preventDefault();\r\n\r\n        let { searchDeviceList, accessToken } = this.state;\r\n\r\n        let device_id = searchDeviceList.device_id;\r\n\r\n\r\n        if (searchDeviceList.registered_by.id === this.props.userID) {\r\n            swal({\r\n                title: \"Are You Sure You Want To Delete This Device?\",\r\n                icon: \"warning\",\r\n                dangerMode: true,\r\n                buttons: {\r\n                    cancel: {\r\n                        visible: true,\r\n                        value: false,\r\n                        text: \"No\"\r\n                    },\r\n                    confirm: {\r\n                        visible: true,\r\n                        value: true,\r\n                        text: \"Yes\"\r\n                    }\r\n                }\r\n            })\r\n                .then(val => {\r\n                    if (val) {\r\n                        $.ajax({\r\n                            method: \"DELETE\",\r\n                            url: BASE_URL + `/api/hardware/${device_id}`,\r\n                            headers: {\r\n                                Authorization: accessToken,\r\n                                'Content-Type': 'application/json'\r\n                            },\r\n                            success: (resp) => {\r\n                                swal({\r\n                                    title: \"Hardware Deleted Successfully.\",\r\n                                    icon: \"success\"\r\n                                }).then(() => this.setState({ ...this.state, searchDeviceList: [], productionNumber: '' }));\r\n                            },\r\n                            error: (resp) => {\r\n                                console.log(resp);\r\n                                swal({\r\n                                    title: \"Something went wrong.\",\r\n                                    text: \"Please try again\",\r\n                                    icon: \"warning\"\r\n                                })\r\n                            }\r\n                        });\r\n                    }\r\n                })\r\n\r\n        }\r\n        else {\r\n            swal({\r\n                title: \"Authorization Error.\",\r\n                text: \"You cannot delete hardware registered by other registrar.\",\r\n                icon: \"warning\"\r\n            })\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    getImageOrTable = () => {\r\n        let { searchDeviceList, selectedMore } = this.state;\r\n        let dataExists;\r\n\r\n        const filteredDetailInfo = searchDeviceList.filter((item) => {\r\n            return item.device_id === selectedMore\r\n        })\r\n\r\n        if (Array.isArray(searchDeviceList)) {\r\n            dataExists = searchDeviceList.length === 0;\r\n        } else {\r\n            dataExists = Object.keys(searchDeviceList).length === 0 && searchDeviceList.constructor === Object;\r\n        }\r\n\r\n        if (dataExists) {\r\n            return (\r\n                <React.Fragment>\r\n                    <Card.Img src={searching} style={{ height: '289px', width: '400px' }} />\r\n                </React.Fragment>\r\n            )\r\n        } else {\r\n            if (this.state.searchOption === \"productionNumber\"){\r\n                return (\r\n                    <React.Fragment>\r\n                        <Table responsive >\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td>Device Id</td>\r\n                                    <td>{this.state.searchDeviceList.device_id}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Production Number</td>\r\n                                    <td>{this.state.searchDeviceList.production_number}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Registered By</td>\r\n                                    <td>{this.state.searchDeviceList.registered_by.username}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Registered On</td>\r\n                                    <td>{this.state.searchDeviceList.registered_on}</td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </Table>\r\n                        <div style={buttonStyle}>\r\n                            <ButtonToolbar>\r\n                                <Button variant=\"primary\" onClick={() => this.setState({ editModalShow: true })}> Edit</Button>\r\n                                <Button variant=\"danger\" style={{ marginLeft: '5px' }} onClick={this.deleteHardware}>Delete</Button>\r\n                                <Modal\r\n                                    aria-labelledby=\"contained-modal-title-vcenter\"\r\n                                    centered\r\n                                    show={this.state.editModalShow}\r\n                                >\r\n                                    <Form onSubmit={this.updateHardwareInfo}>\r\n                                        <Modal.Header closeButton onClick={() => this.setState({ editModalShow: false })}>\r\n                                            <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                                                Edit Hardware Info\r\n                                            </Modal.Title>\r\n                                        </Modal.Header>\r\n                                        <Modal.Body>\r\n                                            <div>\r\n                                                <InputGroup className=\"mb-3\">\r\n                                                    <InputGroup.Prepend>\r\n                                                        <InputGroup.Text id=\"basic-addon1\">Production Number</InputGroup.Text>\r\n                                                    </InputGroup.Prepend>\r\n                                                    <FormControl\r\n                                                        placeholder=\"Enter Production Number\"\r\n                                                        aria-label=\"Production Number\"\r\n                                                        aria-describedby=\"basic-addon1\"\r\n                                                        required\r\n                                                        type=\"number\"\r\n                                                        value={this.state.searchDeviceList.production_number}\r\n                                                        onChange={this.newProductionNumber}\r\n                                                    />\r\n                                                </InputGroup>\r\n                                            </div>\r\n                                        </Modal.Body>\r\n                                        <Modal.Footer>\r\n                                            <Button variant=\"danger\" onClick={() => this.setState({ editModalShow: false })}>Close</Button>\r\n                                            <Button variant=\"success\" onClick={() => this.setState({ editModalShow: false })} type=\"submit\">Save Changes</Button>\r\n                                        </Modal.Footer>\r\n                                    </Form>\r\n                                </Modal>\r\n                            </ButtonToolbar>\r\n                        </div>\r\n                    </React.Fragment>\r\n                )\r\n            }\r\n            else if (this.state.searchOption === \"registeredDate\") {\r\n                return(\r\n                    <React.Fragment>\r\n                        <Table responsive >\r\n                            <tbody>\r\n                                <tr>\r\n                                    <th>Production Number</th>\r\n                                    <th>Registered Date</th>\r\n                                    <th></th>\r\n                                </tr>\r\n                                {this.state.searchDeviceList.map(searchDeviceList => (\r\n                                    <tr key={searchDeviceList.device_id}>\r\n                                        <td>{searchDeviceList.production_number}</td>\r\n                                        <td>{searchDeviceList.registered_on}</td>\r\n                                        <td> <Button variant=\"primary\" onClick={() => this.setState({ moreInfoModalShow: true, selectedMore: searchDeviceList.device_id })}>More</Button></td>\r\n                                        <Modal\r\n                                        aria-labelledby=\"contained-modal-title-vcenter\"\r\n                                        centered\r\n                                        show={this.state.moreInfoModalShow}\r\n                                        >\r\n                                            <Card>\r\n                                                <Modal.Header closeButton onClick={() => this.setState({ moreInfoModalShow: false })}>\r\n                                                    <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                                                        Detail Info\r\n                                                    </Modal.Title>\r\n                                                </Modal.Header>\r\n                                                <Modal.Body>\r\n                                                    <div>\r\n                                                        <Table responsive >\r\n                                                            <tbody>\r\n                                                                {filteredDetailInfo.map(filteredDetailInfo => (\r\n                                                                    <React.Fragment>\r\n                                                                        <tr>\r\n                                                                            <td>Device Id</td>\r\n                                                                            <td>{filteredDetailInfo.device_id}</td>    \r\n                                                                        </tr>\r\n                                                                        <tr>\r\n                                                                            <td>Production Number</td>\r\n                                                                            <td>{filteredDetailInfo.production_number}</td>\r\n                                                                        </tr>\r\n                                                                        <tr>\r\n                                                                            <td>Registered By</td>\r\n                                                                            <td>{filteredDetailInfo.registered_by.username}</td>\r\n                                                                        </tr>\r\n                                                                        <tr>\r\n                                                                            <td>Registered On</td>\r\n                                                                            <td>{filteredDetailInfo.registered_on}</td>\r\n                                                                        </tr>   \r\n                                                                    </React.Fragment> \r\n                                                                ))}     \r\n                                                            </tbody>\r\n                                                        </Table>\r\n                                                    </div>\r\n                                                </Modal.Body>\r\n                                                <Modal.Footer>\r\n                                                    {/* <Button variant=\"primary\" onClick={() => this.setState({ editModalShow: true })} type=\"submit\">Edit</Button> */}\r\n                                                    <Button variant=\"danger\" onClick={() => this.setState({ moreInfoModalShow: false })}>Close</Button>\r\n                                                    <Modal\r\n                                                        aria-labelledby=\"contained-modal-title-vcenter\"\r\n                                                        centered\r\n                                                        show={this.state.editModalShow}\r\n                                                    >\r\n                                                        <Form onSubmit={this.updateHardwareInfo}>\r\n                                                            <Modal.Header closeButton onClick={() => this.setState({ editModalShow: false })}>\r\n                                                                <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                                                                    Edit Hardware Info\r\n                                                                </Modal.Title>\r\n                                                            </Modal.Header>\r\n                                                            <Modal.Body>\r\n                                                                <div>\r\n                                                                    <InputGroup className=\"mb-3\">\r\n                                                                        <InputGroup.Prepend>\r\n                                                                            <InputGroup.Text id=\"basic-addon1\">Production Number</InputGroup.Text>\r\n                                                                        </InputGroup.Prepend>\r\n                                                                        <FormControl\r\n                                                                            placeholder=\"Enter Production Number\"\r\n                                                                            aria-label=\"Production Number\"\r\n                                                                            aria-describedby=\"basic-addon1\"\r\n                                                                            required\r\n                                                                            type=\"number\"\r\n                                                                            value={filteredDetailInfo.map(filteredDetailInfo => (\r\n                                                                                filteredDetailInfo.production_number\r\n                                                                            ))}\r\n                                                                            onChange={this.newProductionNumberFromDetail}\r\n                                                                        />\r\n                                                                    </InputGroup>\r\n                                                                </div>\r\n                                                            </Modal.Body>\r\n                                                            <Modal.Footer>\r\n                                                                <Button variant=\"danger\" onClick={() => this.setState({ editModalShow: false })}>Close</Button>\r\n                                                                <Button variant=\"success\" onClick={() => this.setState({ editModalShow: false })} type=\"submit\">Save Changes</Button>\r\n                                                            </Modal.Footer>\r\n                                                        </Form>\r\n                                                    </Modal>\r\n                                                </Modal.Footer>\r\n                                            </Card>\r\n                                        </Modal>\r\n                                    </tr>    \r\n                                ))}\r\n                            </tbody>\r\n                        </Table>\r\n                    </React.Fragment>    \r\n                )\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    getSearchField = () => {\r\n        let { searchOption } = this.state;\r\n\r\n        if (searchOption === \"productionNumber\") {\r\n            return (\r\n                <React.Fragment>\r\n                    <Form.Control\r\n                        placeholder=\"Production number\"\r\n                        aria-label=\"Production Number\"\r\n                        aria-describedby=\"basic-addon1\"\r\n                        type=\"number\"\r\n                        onChange={this.updateProductNumber}\r\n                        value={this.state.productionNumber}\r\n                        required\r\n                    />\r\n                </React.Fragment>\r\n            )\r\n        } else if (searchOption === \"registeredDate\") {\r\n            return (\r\n                <React.Fragment>\r\n                    <Form.Control\r\n                        placeholder=\"Registered Date\"\r\n                        aria-label=\"Registered Date\"\r\n                        aria-describedby=\"basic-addon1\"\r\n                        type=\"date\"\r\n                        onChange={this.updateRegisteredDate}\r\n                        value={this.state.registeredDate}\r\n                        required />\r\n                </React.Fragment>\r\n            )\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (this.state.searchDeviceList === null) {\r\n\r\n        }\r\n        return (\r\n            <React.Fragment>\r\n                <Card style={cardStyle}>\r\n                    <a onClick={() => { this.setState({ searchDeviceList: [], productionNumber: \"\", registeredDate: \"\" }) }}><h3 style={{ textAlign: 'center' }}> Search Hardware </h3></a>\r\n                    <br />\r\n                    <Form onSubmit={this.getHardware}>\r\n                        <InputGroup className=\"mb-3\">\r\n                            <InputGroup.Prepend>\r\n                                <Dropdown>\r\n                                    <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\r\n                                        Search By\r\n                                    </Dropdown.Toggle>\r\n                                    <Dropdown.Menu>\r\n                                        <Dropdown.Item onClick={ () => this.setState({...this.state, searchOption:\"productionNumber\", searchDeviceList:[], productionNumber: \"\"}) }>Production Number</Dropdown.Item>\r\n                                        <Dropdown.Item onClick={ () => this.setState({...this.state, searchOption:\"registeredDate\", searchDeviceList:[], registeredDate: \"\"}) }>Registered Date</Dropdown.Item>\r\n                                    </Dropdown.Menu>\r\n                                </Dropdown>\r\n                            </InputGroup.Prepend>\r\n                            { this.getSearchField() }\r\n                            <InputGroup.Append>\r\n                                <Button variant=\"success\" type=\"submit\">Search</Button>\r\n                            </InputGroup.Append>\r\n                        </InputGroup>\r\n                    </Form>\r\n                    <br />\r\n                    {this.getImageOrTable()}\r\n                </Card>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    username: state.credentials.user.username,\r\n    access: state.credentials.tokens.accessToken,\r\n    userID: state.credentials.user.id\r\n})\r\n\r\nexport default connect(mapStateToProps, {})(Search);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport swal from 'sweetalert';\r\nimport $ from 'jquery';\r\n\r\nimport { setAuthCred } from '../actions';\r\n\r\nimport AddHardware from './AddHardware';\r\nimport Search from './Search';\r\n\r\nimport { BASE_URL } from '../baseValues';\r\n\r\nclass Home extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            reduxValue:this.props.reduxValue\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getUserID()\r\n    }\r\n\r\n    refreshToken = () => {\r\n        let { reduxValue } = this.state;\r\n\r\n        setInterval(() => {\r\n            $.ajax({\r\n                method: \"POST\",\r\n                url: BASE_URL + \"/api/auth/token/refresh\",\r\n                data: {\r\n                    refresh: reduxValue.tokens.refreshToken\r\n                },\r\n                success: (resp) => {\r\n                    reduxValue.tokens.accessToken = `Bearer ${resp.access}`;\r\n                    this.props.setAuthCred(reduxValue);\r\n                }\r\n            })\r\n        }, 600000);\r\n    }\r\n\r\n    getUserID = () => {\r\n        var { reduxValue } = this.state;\r\n        let { accessToken } = reduxValue.tokens;\r\n        let { username } = reduxValue.user;\r\n\r\n        let data = {\r\n            username: username\r\n        };\r\n\r\n        $.ajax({\r\n            method: \"GET\",\r\n            url: BASE_URL + \"/api/user/\",\r\n            headers: {\r\n                Authorization: accessToken,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            data,\r\n            dataType: 'json',\r\n            success: (resp) => {\r\n                reduxValue.user.id = resp.results.id\r\n                this.props.setAuthCred(reduxValue);\r\n            },\r\n            error: function (resp) {\r\n                console.log(resp);\r\n                swal({\r\n                    title: \"Unable to update your user data.\",\r\n                    // text: \"Please try again.\",\r\n                    icon: \"warning\"\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"container\" style={{ marginTop: '10vh' }}>\r\n                    <div className=\"row justify-content-center\">\r\n                        <div className=\"col-sm-auto margin-card\">\r\n                            <AddHardware />\r\n                        </div>\r\n                        <div className=\"col-sm-auto margin-card\">\r\n                            <Search />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    reduxValue:state.credentials\r\n})\r\n\r\nexport default connect(mapStateToProps, { setAuthCred })(Home);","import React from 'react';\r\nimport { Container } from 'react-bootstrap';\r\n\r\nexport const Layout = (props) => (\r\n    <Container>\r\n        {props.children}\r\n    </Container>\r\n)","import { combineReducers } from 'redux';\r\nimport { SET_AUTH } from '../actions/types';\r\n\r\nexport const defaultCredState = {\r\n    user:{\r\n        id:\"\",\r\n        username:\"\"\r\n    },\r\n    tokens:{\r\n        accessToken:\"\",\r\n        refreshToken:\"\"\r\n    }\r\n}\r\n\r\nfunction credReducer(state = defaultCredState, action) {\r\n    switch (action.type) {\r\n        case SET_AUTH:\r\n            console.log(action.cred)\r\n            return action.cred;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default combineReducers({\r\n    credentials:credReducer\r\n})","import { createStore, applyMiddleware, compose } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport rootReducer from './reducers'\r\n\r\nfunction loadFromLocalStorage() {\r\n    // const now = new Date();\r\n    try {\r\n        const serializedState = localStorage.getItem('state')\r\n        if (serializedState === null) {\r\n            return undefined;\r\n        } else {\r\n            let state = JSON.parse(serializedState);\r\n            return state;\r\n            // if (now.getTime() > state.expiry) {\r\n            //     localStorage.removeItem('state');\r\n            //     return undefined;\r\n            // } else {\r\n            //     return state;\r\n            // }\r\n        }\r\n    }\r\n    catch (e) {\r\n        console.log(e)\r\n        return undefined;\r\n    }\r\n}\r\n\r\nconst persistedState = loadFromLocalStorage();\r\n\r\nexport const store = createStore(\r\n    rootReducer,\r\n    persistedState,\r\n    compose(\r\n        applyMiddleware(thunk),\r\n        window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n    )\r\n)\r\n\r\nexport default store","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { setAuthCred } from '../actions';\r\n// import { defaultCredState } from '../reducers';\r\n\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport $ from 'jquery';\r\nimport swal from 'sweetalert';\r\n\r\nimport { BASE_URL } from '../baseValues';\r\nimport { Layout } from '../components/Layout';\r\n\r\nimport { store } from '../store';\r\n\r\nconst formStyle = {\r\n\r\n    padding: '30px',\r\n    borderRadius: '10px',\r\n    boxShadow: '0px 0px 10px 0px #000'\r\n\r\n};\r\n\r\nclass Login extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            url: BASE_URL + '/api/auth/token/login/',\r\n            auth: {\r\n                user: {\r\n                    username: this.props.credentials.username,\r\n                },\r\n                tokens: {\r\n                    accessToken: this.props.tokens.accessToken,\r\n                    refreshToken: this.props.tokens.refreshToken\r\n                }\r\n            },\r\n            password: \"\"\r\n        }\r\n\r\n\r\n        this.submitForm = this.submitForm.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        let { tokens } = this.state.auth;\r\n\r\n        if (tokens.accessToken) {\r\n            this.props.setAuth();\r\n        }\r\n    }\r\n\r\n    updateUsername = (e) => {\r\n        let { auth } = this.state;\r\n        auth.user.username = e.target.value;\r\n\r\n        this.setState({\r\n            ...this.state,\r\n            auth\r\n        });\r\n    }\r\n\r\n    updatePassword = (e) => {\r\n        let { password } = this.state;\r\n        password = e.target.value;\r\n\r\n        this.setState({\r\n            ...this.state,\r\n            password\r\n        });\r\n    }\r\n\r\n    submitForm(e) {\r\n        e.preventDefault();\r\n\r\n        let { username } = this.state.auth.user;\r\n        let { password } = this.state;\r\n\r\n        let data = JSON.stringify({\r\n            username,\r\n            password\r\n        })\r\n\r\n        var component = this\r\n\r\n        const hashedAppKey = \"6117160db3031c067ae97f06a216ebb4c64f9a978956e63c75f19c824f8b59e8a92c038d2ec9e5b5c1d6ee023212b6f26a8ceb07954cec05e902d278a7b6cf1a\";\r\n\r\n        $.ajax({\r\n            method: \"POST\",\r\n            url: this.state.url,\r\n            headers: {\r\n                app: hashedAppKey,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            data,\r\n            dataType: 'json',\r\n            success: function (resp) {\r\n                let { auth } = component.state;\r\n                auth.tokens = {\r\n                    accessToken: `Bearer ${resp.access}`,\r\n                    refreshToken: resp.refresh\r\n                }\r\n\r\n                component.props.setAuthCred(component.state.auth);\r\n                component.props.setAuth();\r\n            },\r\n            error: function (resp) {\r\n                console.log(resp)\r\n                swal({\r\n                    title: \"Authentication failed\",\r\n                    icon: \"error\"\r\n                });\r\n            }\r\n        })\r\n    }\r\n\r\n    \r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Layout>\r\n                    <div className=\"vertical-center\">\r\n                        <div className=\"container-fluid\">\r\n                            <div className=\"row justify-content-center\">\r\n                                <div className=\"col-10 col-sm-6 col-md-6\">\r\n                                    <div className=\"form-container\" style={formStyle}>\r\n                                        <h3 style={{ textAlign: 'center' }}>LOGIN</h3>\r\n                                        <br />\r\n                                        <form onSubmit={this.submitForm}>\r\n                                            <Form.Group controlId=\"formBasicUsername\">\r\n                                                <Form.Label>Username</Form.Label>\r\n                                                <Form.Control type=\"text\" placeholder=\"Enter Username\" name=\"username\" value={this.state.username} onChange={this.updateUsername} />\r\n                                            </Form.Group>\r\n                                            <Form.Group controlId=\"formBasicPassword\" >\r\n                                                <Form.Label>Password</Form.Label>\r\n                                                <Form.Control type=\"password\" placeholder=\"Enter Password\" name=\"password\" value={this.state.password} onChange={this.updatePassword} />\r\n                                            </Form.Group>\r\n                                            <Button variant=\"success\" type=\"submit\" className=\"btn-block\">\r\n                                                Login\r\n                                            </Button>\r\n                                        </form>\r\n\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </Layout>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    credentials: state.credentials.user,\r\n    tokens: state.credentials.tokens\r\n})\r\n\r\nexport default connect(mapStateToProps, { setAuthCred })(Login);\r\n\r\nfunction saveToLocalStorage(state) {\r\n    // const now = new Date();\r\n    // let expiryTime = now.getTime() + 1200000; // 20 minutes\r\n\r\n    try {\r\n        // state.expiry = expiryTime;\r\n        let serializedState = JSON.stringify(state);\r\n        localStorage.setItem('state', serializedState);\r\n    }\r\n    catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\nstore.subscribe(() => saveToLocalStorage(store.getState()));\r\n// setInterval(() => localStorage.removeItem('state'), 1200000);","import React, { Component } from 'react'\r\n\r\n\r\nexport class About extends Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h2>About Page</h2>\r\n                <p>This is a Hardware Registration App.</p>\r\n            </div>\r\n        )\r\n    }\r\n} \r\n\r\nexport default About\r\n","import React, { Component, props } from 'react';\r\nimport { Form, Button, ButtonToolbar, form, Row, Col, Table, Modal, InputGroup, FormControl } from 'react-bootstrap';\r\nimport { connect } from 'react-redux';\r\nimport { setAuthCred } from '../actions';\r\nimport { BASE_URL } from '../baseValues';\r\nimport $ from 'jquery';\r\nimport swal from 'sweetalert';\r\n\r\nimport loading from '../assets/images/loading.gif';\r\n\r\nconst formStyle = {\r\n\r\n    padding: '30px',\r\n    borderRadius: '10px',\r\n    boxShadow: '0px 0px 10px 0px #000',\r\n\r\n};\r\n\r\nconst buttonStyle = {\r\n\r\n    display: 'flex',\r\n    justifyContent: 'center'\r\n\r\n};\r\n\r\n\r\n\r\nexport class Profile extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            editModalShow: false,\r\n            changepasswordModalShow: false,\r\n            accessToken: this.props.credentials.tokens.accessToken,\r\n            userInfo: {},\r\n            password: {\r\n                // oldPassword: '',\r\n                newPassword: '',\r\n                confirmNewPassword: ''\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        let { accessToken } = this.state;\r\n\r\n        let username = this.props.credentials.user.username;\r\n\r\n        let data = {\r\n            username\r\n        };\r\n\r\n        var component = this;\r\n\r\n        $.ajax({\r\n            method: \"GET\",\r\n            url: BASE_URL + \"/api/user/\",\r\n            headers: {\r\n                Authorization: accessToken,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            data,\r\n            dataType: 'json',\r\n            success: function (resp) {\r\n                component.setState({ ...component.state, userInfo: resp.results });\r\n            },\r\n            error: function (resp) {\r\n                console.log(resp);\r\n                swal({\r\n                    title: \"Unable to fetch your user data.\",\r\n                    text: \"Please try again.\",\r\n                    icon: \"warning\"\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    newFirstName = (e) => {\r\n        let { userInfo } = this.state;\r\n        userInfo.first_name = e.target.value\r\n        this.setState({ ...this.state, userInfo });\r\n    }\r\n\r\n    newLastName = (e) => {\r\n        let { userInfo } = this.state;\r\n        userInfo.last_name = e.target.value\r\n        this.setState({ ...this.state, userInfo });\r\n    }\r\n\r\n    newEmail = (e) => {\r\n        let { userInfo } = this.state;\r\n        userInfo.email = e.target.value\r\n        this.setState({ ...this.state, userInfo });\r\n    }\r\n\r\n    newUsername = (e) => {\r\n        let { userInfo } = this.state;\r\n        userInfo.username = e.target.value\r\n        this.setState({ ...this.state, userInfo });\r\n    }\r\n\r\n    newPhone = (e) => {\r\n        let { userInfo } = this.state;\r\n        userInfo.phone = e.target.value\r\n        this.setState({ ...this.state, userInfo });\r\n    }\r\n\r\n    updateUserInfo = (e) => {\r\n        e.preventDefault();\r\n\r\n        let { userInfo, accessToken } = this.state;\r\n\r\n        // let firstName = userInfo.first_name;\r\n        // let lastName = userInfo.last_name;\r\n        // let userName = userInfo.username;\r\n        // let emailAddress = userInfo.email;\r\n        // let phoneNumber = userInfo.phone;\r\n        // let accountTypeValue = userInfo.account_type.value;\r\n        // // let accountType = userInfo.account_type.type;\r\n        // let activeStatus = userInfo.is_active;\r\n        // let superUser = userInfo.is_superuser;\r\n\r\n        let id = userInfo.id;\r\n        userInfo.active = userInfo.is_active;\r\n        userInfo.superuser = userInfo.is_superuser;\r\n        userInfo.staff = userInfo.is_staff;\r\n\r\n        let data = JSON.stringify(userInfo);\r\n        var reduxValue = this.props.credentials;\r\n\r\n        $.ajax({\r\n            method: \"PUT\",\r\n            url: BASE_URL + `/api/user/${id}`,\r\n            xhr:function() {\r\n                let xhr = new window.XMLHttpRequest();\r\n                xhr.upload.addEventListener(\"progress\", function () {\r\n                    swal({\r\n                        icon:loading\r\n                    });\r\n                }, false);\r\n\r\n                return xhr;\r\n            },\r\n            headers: {\r\n                Authorization: accessToken,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            data,\r\n            dataType: 'json',\r\n            success: (resp) => {\r\n                reduxValue.user = { username:userInfo.username }\r\n\r\n                this.props.setAuthCred(reduxValue);\r\n\r\n                swal({\r\n                    title: \"User Information Updated Successfully.\",\r\n                    icon: \"success\"\r\n                })\r\n            },\r\n            error: (resp) => {\r\n                console.log(resp);\r\n                swal({\r\n                    title: \"Something went wrong\",\r\n                    text: \"Please try again\",\r\n                    icon: \"warning\"\r\n                })\r\n            }\r\n        });\r\n    }\r\n\r\n    // updatedOldPassword = (e) => {\r\n    //     let { password } = this.state;\r\n    //     password.oldPassword = e.target.value\r\n    //     this.setState({ ...this.state, password })\r\n    // }\r\n\r\n    updatedNewPassword = (e) => {\r\n        let { password } = this.state;\r\n        password.newPassword = e.target.value\r\n        this.setState({ ...this.state, password })\r\n    }\r\n\r\n    updatedConfirmNewPassword = (e) => {\r\n        let { password } = this.state;\r\n        password.confirmNewPassword = e.target.value\r\n        this.setState({ ...this.state, password })\r\n    }\r\n\r\n\r\n\r\n    updateUserPassword = (e) => {\r\n        e.preventDefault();\r\n\r\n        let { password, userInfo, accessToken } = this.state;\r\n\r\n        let confirmNewPassword = password.confirmNewPassword;\r\n\r\n        let newPassword = password.newPassword;\r\n\r\n        // let oldPassword = password.oldPassword;\r\n\r\n        let id = userInfo.id;\r\n\r\n        let data = JSON.stringify({\r\n            password: confirmNewPassword\r\n        });\r\n\r\n        if (newPassword === confirmNewPassword) {\r\n            $.ajax({\r\n                method: \"PUT\",\r\n                url: BASE_URL + `/api/user/password/${id}`,\r\n                headers: {\r\n                    Authorization: accessToken,\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                data,\r\n                dataType: 'json',\r\n                success: (resp) => {\r\n                    swal({\r\n                        title: \"Password Changed Successfully.\",\r\n                        icon: \"success\"\r\n                    }).then(() => this.setState({ ...this.state, password: [] }));\r\n                },\r\n                error: (resp) => {\r\n                    console.log(resp);\r\n                    swal({\r\n                        title: \"Something went wrong.\",\r\n                        text: \"Please try again\",\r\n                        icon: \"warning\"\r\n                    })\r\n                }\r\n            })\r\n        }\r\n        else {\r\n            swal({\r\n                title: \"Password Update Error!\",\r\n                text: \"New password must be different from old password and New password and Confirm New Password must match.\",\r\n                icon: \"warning\"\r\n            }).then(() => this.setState({ ...this.state, password: [] }));\r\n        }\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container-fluid\" style={{ marginTop: '15vh' }}>\r\n                <div className=\"row justify-content-center\">\r\n                    <div className=\"col-10 col-sm-6 col-md-6\">\r\n                        <div className=\"form-container\" style={formStyle}>\r\n                            <h3 style={{ textAlign: 'center' }}>Profile</h3>\r\n                            <br />\r\n                            <div className=\"container\" style={{ textAlign: 'center' }}>\r\n                                <Table responsive>\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>Name</td>\r\n                                            <td>{this.state.userInfo.first_name} {this.state.userInfo.last_name}</td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td>Username</td>\r\n                                            <td>{this.state.userInfo.username}</td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td>Email</td>\r\n                                            <td>{this.state.userInfo.email}</td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td>Phone no</td>\r\n                                            <td>{this.state.userInfo.phone}</td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                </Table>\r\n                            </div>\r\n                            <div style={buttonStyle}>\r\n                                <ButtonToolbar>\r\n                                    <Button variant=\"primary\" style={{ marginRight: '5px' }} onClick={() => this.setState({ editModalShow: true })}> Edit Info </Button>\r\n                                    <Modal\r\n                                        aria-labelledby=\"contained-modal-title-vcenter\"\r\n                                        centered\r\n                                        show={this.state.editModalShow}\r\n                                    >\r\n                                        <Form onSubmit={this.updateUserInfo}>\r\n                                            <Modal.Header closeButton onClick={() => this.setState({ editModalShow: false })}>\r\n                                                <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                                                    Edit Profile Info\r\n                                                </Modal.Title>\r\n                                            </Modal.Header>\r\n                                            <Modal.Body>\r\n                                                <div>\r\n                                                    <InputGroup className=\"mb-3\">\r\n                                                        <InputGroup.Prepend>\r\n                                                            <InputGroup.Text id=\"basic-addon1\">First Name</InputGroup.Text>\r\n                                                        </InputGroup.Prepend>\r\n                                                        <FormControl\r\n                                                            placeholder=\"Enter First Name\"\r\n                                                            aria-label=\"First Name\"\r\n                                                            aria-describedby=\"basic-addon1\"\r\n                                                            required\r\n                                                            type=\"text\"\r\n                                                            value={this.state.userInfo.first_name}\r\n                                                            onChange={this.newFirstName}\r\n                                                        />\r\n                                                    </InputGroup>\r\n                                                    <InputGroup className=\"mb-3\">\r\n                                                        <InputGroup.Prepend>\r\n                                                            <InputGroup.Text id=\"basic-addon1\">Last Name</InputGroup.Text>\r\n                                                        </InputGroup.Prepend>\r\n                                                        <FormControl\r\n                                                            placeholder=\"Enter Last Name\"\r\n                                                            aria-label=\"Last Name\"\r\n                                                            aria-describedby=\"basic-addon1\"\r\n                                                            required\r\n                                                            type=\"text\"\r\n                                                            value={this.state.userInfo.last_name}\r\n                                                            onChange={this.newLastName}\r\n                                                        />\r\n                                                    </InputGroup>\r\n                                                    <InputGroup className=\"mb-3\">\r\n                                                        <InputGroup.Prepend>\r\n                                                            <InputGroup.Text id=\"basic-addon1\">Username</InputGroup.Text>\r\n                                                        </InputGroup.Prepend>\r\n                                                        <FormControl\r\n                                                            placeholder=\"Enter Username\"\r\n                                                            aria-label=\"Username\"\r\n                                                            aria-describedby=\"basic-addon1\"\r\n                                                            required\r\n                                                            type=\"text\"\r\n                                                            value={this.state.userInfo.username}\r\n                                                            onChange={this.newUsername}\r\n                                                        />\r\n                                                    </InputGroup>\r\n                                                    <InputGroup className=\"mb-3\">\r\n                                                        <InputGroup.Prepend>\r\n                                                            <InputGroup.Text id=\"basic-addon1\">Email</InputGroup.Text>\r\n                                                        </InputGroup.Prepend>\r\n                                                        <FormControl\r\n                                                            placeholder=\"Enter Email Address\"\r\n                                                            aria-label=\"Email\"\r\n                                                            aria-describedby=\"basic-addon1\"\r\n                                                            required\r\n                                                            type=\"email\"\r\n                                                            value={this.state.userInfo.email}\r\n                                                            onChange={this.newEmail}\r\n                                                        />\r\n                                                    </InputGroup>\r\n                                                    <InputGroup className=\"mb-3\">\r\n                                                        <InputGroup.Prepend>\r\n                                                            <InputGroup.Text id=\"basic-addon1\">Phone no</InputGroup.Text>\r\n                                                        </InputGroup.Prepend>\r\n                                                        <FormControl\r\n                                                            placeholder=\"Enter Phone Number\"\r\n                                                            aria-label=\"Phone no\"\r\n                                                            aria-describedby=\"basic-addon1\"\r\n                                                            required\r\n                                                            type=\"number\"\r\n                                                            value={this.state.userInfo.phone}\r\n                                                            onChange={this.newPhone}\r\n                                                        />\r\n                                                    </InputGroup>\r\n                                                </div>\r\n                                            </Modal.Body>\r\n                                            <Modal.Footer>\r\n                                                <Button variant=\"danger\" onClick={() => this.setState({ editModalShow: false })}>Close</Button>\r\n                                                <Button variant=\"success\" type=\"submit\" onClick={() => this.setState({ editModalShow: false })}>Save Changes</Button>\r\n                                            </Modal.Footer>\r\n                                        </Form>\r\n                                    </Modal>\r\n                                </ButtonToolbar>\r\n                                <ButtonToolbar>\r\n                                    <Button variant=\"secondary\" onClick={() => this.setState({ changepasswordModalShow: true })}> Change Password </Button>\r\n                                    <Modal\r\n                                        aria-labelledby=\"contained-modal-title-vcenter\"\r\n                                        centered\r\n                                        show={this.state.changepasswordModalShow}\r\n                                    >\r\n                                        <Form onSubmit={this.updateUserPassword}>\r\n                                            <Modal.Header closeButton onClick={() => this.setState({ changepasswordModalShow: false })}>\r\n                                                <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                                                    Change Password\r\n                                                </Modal.Title>\r\n                                            </Modal.Header>\r\n                                            <Modal.Body>\r\n                                                <InputGroup className=\"mb-3\">\r\n                                                    <InputGroup.Prepend>\r\n                                                        <InputGroup.Text id=\"basic-addon1\">Old Password</InputGroup.Text>\r\n                                                    </InputGroup.Prepend>\r\n                                                    <FormControl\r\n                                                        placeholder=\"Enter Old Password\"\r\n                                                        aria-label=\"Old Password\"\r\n                                                        aria-describedby=\"basic-addon1\"\r\n                                                        type=\"password\"\r\n                                                        required\r\n                                                        value={this.state.password.oldPassword}\r\n                                                        onChange={this.updatedOldPassword}\r\n\r\n                                                    />\r\n                                                </InputGroup>\r\n                                                <InputGroup className=\"mb-3\">\r\n                                                    <InputGroup.Prepend>\r\n                                                        <InputGroup.Text id=\"basic-addon1\">New Password</InputGroup.Text>\r\n                                                    </InputGroup.Prepend>\r\n                                                    <FormControl\r\n                                                        placeholder=\"Enter New Password\"\r\n                                                        aria-label=\"New Password\"\r\n                                                        aria-describedby=\"basic-addon1\"\r\n                                                        type=\"password\"\r\n                                                        required\r\n                                                        value={this.state.password.newPassword}\r\n                                                        onChange={this.updatedNewPassword}\r\n                                                    />\r\n                                                </InputGroup>\r\n                                                <InputGroup className=\"mb-3\">\r\n                                                    <InputGroup.Prepend>\r\n                                                        <InputGroup.Text id=\"basic-addon1\">Confirm Password</InputGroup.Text>\r\n                                                    </InputGroup.Prepend>\r\n                                                    <FormControl\r\n                                                        placeholder=\"Re-enter New Password\"\r\n                                                        aria-label=\"Confirm Password\"\r\n                                                        aria-describedby=\"basic-addon1\"\r\n                                                        type=\"password\"\r\n                                                        required\r\n                                                        value={this.state.password.confirmNewPassword}\r\n                                                        onChange={this.updatedConfirmNewPassword}\r\n                                                    />\r\n                                                </InputGroup>\r\n                                            </Modal.Body>\r\n                                            <Modal.Footer>\r\n                                                <Button variant=\"danger\" onClick={() => this.setState({ changepasswordModalShow: false })}>Close</Button>\r\n                                                <Button variant=\"success\" type=\"submit\" onClick={() => this.setState({ changepasswordModalShow: false })}>Save Changes</Button>\r\n                                            </Modal.Footer>\r\n                                        </Form>\r\n                                    </Modal>\r\n                                </ButtonToolbar>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    credentials:state.credentials\r\n})\r\n\r\n\r\n\r\nexport default connect(mapStateToProps, { setAuthCred })(Profile);\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport { Navbar, Container, Dropdown } from 'react-bootstrap';\r\n// import { connect } from 'react-redux';\r\n\r\nimport styled from 'styled-components';\r\nimport { Component } from 'react';\r\n\r\nconst Styles = styled.div`\r\n    .navbar-brand {\r\n        color: #ffffff;\r\n\r\n        &:hover {\r\n            color: #e1ebe5;\r\n        }\r\n\r\n       \r\n    }   \r\n`;\r\n\r\nconst localUsername = () => {\r\n    let local = JSON.parse(localStorage.getItem('state'));\r\n    return local.credentials.user.username;\r\n}\r\n\r\nclass NavigationBar extends Component {\r\n    constructor(props){\r\n        super(props)\r\n\r\n        this.state = {\r\n            username:localUsername()\r\n        }\r\n    }\r\n\r\n    killSession = () => {\r\n        localStorage.removeItem('state');\r\n        window.location.href=\"\";\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <Styles>\r\n                <Navbar expand=\"lg\" className=\"bg-dark\" >\r\n                    <Container>\r\n                        <Navbar.Brand onClick ={ () => this.props.setMode(\"home\") }><h3>Hardware Registration App</h3></Navbar.Brand>\r\n                        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                            <div style={{position:'absolute', right:'15rem'}}>\r\n                                <Dropdown >\r\n                                    <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n                                        { this.state.username }\r\n                                    </Dropdown.Toggle>\r\n\r\n                                    <Dropdown.Menu>\r\n                                        <Dropdown.Item onClick={ () => this.props.setMode(\"profile\") }>Profile</Dropdown.Item>\r\n                                        <Dropdown.Item onClick={ () => this.props.setMode(\"about\") }>About</Dropdown.Item>\r\n                                        <Dropdown.Divider />\r\n                                        <Dropdown.Item onClick={ this.killSession }>Logout</Dropdown.Item>\r\n                                    </Dropdown.Menu>\r\n                                </Dropdown>\r\n                            </div>\r\n                        </Navbar.Collapse>\r\n                    </Container>    \r\n                </Navbar>\r\n            </Styles>\r\n        )\r\n    }\r\n}\r\n\r\n// const mapStateToProps = state => ({\r\n//     username:state.credentials.user.username\r\n// })\r\n\r\n// export default connect(mapStateToProps, {})(NavigationBar);\r\nexport default NavigationBar;","import React, { Component } from 'react';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport Home from './pages/Home';\r\nimport Login  from './pages/Login';\r\nimport About from './pages/About';\r\nimport Profile from './pages/Profile';\r\n\r\nimport NavigationBar from './components/NavigationBar';\r\n\r\nimport store from './store';\r\n\r\nconst defaultState = {\r\n  authenticated:false,\r\n  mode:\"home\"\r\n}\r\n\r\nclass App extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = defaultState;\r\n  };\r\n\r\n  setMode = (mode) => {\r\n    this.setState({...this.state, mode});\r\n  }\r\n\r\n  setAuth = () => this.setState({ ...this.state, authenticated:true });\r\n\r\n  getComponents() {\r\n    let { mode } = this.state\r\n    let returnComponent;\r\n\r\n    if (mode === \"home\") {\r\n      returnComponent = (<Home />)\r\n    }\r\n    else if (mode === \"profile\") {\r\n      returnComponent = (<Profile />)\r\n    }\r\n    else if (mode === \"about\") {\r\n      returnComponent = (<About />)\r\n    }\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <NavigationBar setMode={ this.setMode }/>\r\n        { returnComponent }\r\n      </React.Fragment>\r\n    )\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <Provider store={store}>\r\n        <React.Fragment>\r\n            { this.state.authenticated ? this.getComponents() : <Login setAuth={this.setAuth}/> }\r\n        </React.Fragment>\r\n      </Provider>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './assets/css/index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}